
servo_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031a  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c4  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ca  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001df  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000337  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  7a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <get_value>:
#include "avr.h"


char get_value(unsigned char key)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	int index = (int) key;
  96:	90 e0       	ldi	r25, 0x00	; 0
	
	if(index < 15)
  98:	8f 30       	cpi	r24, 0x0F	; 15
  9a:	91 05       	cpc	r25, r1
  9c:	8c f4       	brge	.+34     	; 0xc0 <get_value+0x3e>
	{
		const char keypad[16] = {
  9e:	20 e1       	ldi	r18, 0x10	; 16
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	2a 95       	dec	r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <get_value+0x26>
			'7','8','9','C',
			'*','0','#','D'};
	
		int index = (int) key;
	
		return keypad[index];		
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	ec 0f       	add	r30, r28
  b6:	fd 1f       	adc	r31, r29
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	80 81       	ld	r24, Z
  be:	01 c0       	rjmp	.+2      	; 0xc2 <get_value+0x40>
	}
	
	else
	{
		return 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
  c2:	60 96       	adiw	r28, 0x10	; 16
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <wait_avr>:
	WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  d4:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  da:	83 e8       	ldi	r24, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  dc:	08 c0       	rjmp	.+16     	; 0xee <wait_avr+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  de:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  e0:	98 b7       	in	r25, 0x38	; 56
  e2:	91 60       	ori	r25, 0x01	; 1
  e4:	98 bf       	out	0x38, r25	; 56
		WDR();
  e6:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  e8:	08 b6       	in	r0, 0x38	; 56
  ea:	00 fe       	sbrs	r0, 0
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	a8 f7       	brcc	.-22     	; 0xde <wait_avr+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  f4:	13 be       	out	0x33, r1	; 51
  f6:	08 95       	ret

000000f8 <pressed>:
	
	return  0xff;
}

unsigned char pressed(unsigned r, unsigned c)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	eb 01       	movw	r28, r22
	DDRC = 0x0f;
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	94 bb       	out	0x14, r25	; 20
	PORTC = 0xff;
 102:	9f ef       	ldi	r25, 0xFF	; 255
 104:	95 bb       	out	0x15, r25	; 21
	
	CLR_BIT(PORTC,r);
 106:	95 b3       	in	r25, 0x15	; 21
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <pressed+0x1a>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <pressed+0x16>
 116:	20 95       	com	r18
 118:	29 23       	and	r18, r25
 11a:	25 bb       	out	0x15, r18	; 21
	
	wait_avr(1);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 6a 00 	call	0xd4	; 0xd4 <wait_avr>
	
	if(!GET_BIT(PINC,c+4))
 124:	83 b3       	in	r24, 0x13	; 19
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	24 96       	adiw	r28, 0x04	; 4
 12a:	02 c0       	rjmp	.+4      	; 0x130 <pressed+0x38>
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	ca 95       	dec	r28
 132:	e2 f7       	brpl	.-8      	; 0x12c <pressed+0x34>
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	82 27       	eor	r24, r18
		return 1;
	}
	
	return 0;
	
 138:	81 70       	andi	r24, 0x01	; 1
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <get_key>:
	}
}


unsigned char get_key()
{
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	10 e0       	ldi	r17, 0x00	; 0
 154:	c1 2c       	mov	r12, r1
 156:	d1 2c       	mov	r13, r1
 158:	14 c0       	rjmp	.+40     	; 0x182 <get_key+0x42>
	for(r = 0; r < 4; r++)
	{
		for(c=0; c < 4; ++c)
		{
			
			if(pressed(r,c))
 15a:	be 01       	movw	r22, r28
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 7c 00 	call	0xf8	; 0xf8 <pressed>
 162:	88 23       	and	r24, r24
 164:	29 f0       	breq	.+10     	; 0x170 <get_key+0x30>
			{
				
				return r * 4 + c;
 166:	8e 2d       	mov	r24, r14
 168:	88 0f       	add	r24, r24
 16a:	88 0f       	add	r24, r24
 16c:	8c 0f       	add	r24, r28
 16e:	0e c0       	rjmp	.+28     	; 0x18c <get_key+0x4c>
 170:	21 96       	adiw	r28, 0x01	; 1
{
	unsigned char r,c;
	
	for(r = 0; r < 4; r++)
	{
		for(c=0; c < 4; ++c)
 172:	c4 30       	cpi	r28, 0x04	; 4
 174:	d1 05       	cpc	r29, r1
 176:	89 f7       	brne	.-30     	; 0x15a <get_key+0x1a>
 178:	0f 5f       	subi	r16, 0xFF	; 255
 17a:	1f 4f       	sbci	r17, 0xFF	; 255

unsigned char get_key()
{
	unsigned char r,c;
	
	for(r = 0; r < 4; r++)
 17c:	04 30       	cpi	r16, 0x04	; 4
 17e:	11 05       	cpc	r17, r1
 180:	21 f0       	breq	.+8      	; 0x18a <get_key+0x4a>
 182:	e0 2e       	mov	r14, r16
	}
}


unsigned char get_key()
{
 184:	cc 2d       	mov	r28, r12
 186:	dd 2d       	mov	r29, r13
 188:	e8 cf       	rjmp	.-48     	; 0x15a <get_key+0x1a>
			}
		}
		
	}	
	
	return  0xff;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <main>:
#include "avr.c"


int main(void)
{
	DDRA = 0x01; //Makes RC0 output pin
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 1a2:	1b ba       	out	0x1b, r1	; 27
		}
		
		if(c == 'B')
		{
			//Rotate Motor to 90 degree
			PORTA = 0x01;
 1a4:	c1 e0       	ldi	r28, 0x01	; 1
{
	DDRA = 0x01; //Makes RC0 output pin
	PORTA = 0x00;
	while(1)
	{
		char c = get_value(get_key());
 1a6:	0e 94 a0 00 	call	0x140	; 0x140 <get_key>
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <get_value>
		if(c == 'A')
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	49 f4       	brne	.+18     	; 0x1c4 <main+0x26>
		{
			//Rotate Motor to 0 degree
			PORTA = 0x01;
 1b2:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f ec       	ldi	r24, 0xCF	; 207
 1b6:	97 e0       	ldi	r25, 0x07	; 7
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x1a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x20>
 1be:	00 00       	nop
			 _delay_us(1000);
			PORTA = 0x00;
 1c0:	1b ba       	out	0x1b, r1	; 27
 1c2:	f1 cf       	rjmp	.-30     	; 0x1a6 <main+0x8>
			
		}
		
		if(c == 'B')
 1c4:	82 34       	cpi	r24, 0x42	; 66
 1c6:	49 f4       	brne	.+18     	; 0x1da <main+0x3c>
		{
			//Rotate Motor to 90 degree
			PORTA = 0x01;
 1c8:	cb bb       	out	0x1b, r28	; 27
 1ca:	87 eb       	ldi	r24, 0xB7	; 183
 1cc:	9b e0       	ldi	r25, 0x0B	; 11
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x30>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x36>
 1d4:	00 00       	nop
			 _delay_us(1500);
			PORTA = 0x00;				
 1d6:	1b ba       	out	0x1b, r1	; 27
 1d8:	e6 cf       	rjmp	.-52     	; 0x1a6 <main+0x8>
		}
		
		if(c == 'C')
 1da:	83 34       	cpi	r24, 0x43	; 67
 1dc:	21 f7       	brne	.-56     	; 0x1a6 <main+0x8>
		{
			//Rotate Motor to 180 degree
			PORTA = 0x01;
 1de:	cb bb       	out	0x1b, r28	; 27
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x46>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x4c>
 1ea:	00 00       	nop
			_delay_us(2000);
			PORTA = 0x00;			
 1ec:	1b ba       	out	0x1b, r1	; 27
 1ee:	db cf       	rjmp	.-74     	; 0x1a6 <main+0x8>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
